.. To add a method in this file, please use the following format.
..
.. In general, each method needs to be enclosed in .. container:: toggle
.. In toggle container, we have header (required), discussion (optional),
.. declaration (optional), parameters (optional), retval (optional),
.. availability (optional).
..
.. If a method is deprecated, you can mark the header as deprecated.
.. So you would have .. container :: header deprecated
..
.. .. container:: toggle
..
..    .. container:: header
..
..       <insert method name here>
..
..    .. container:: discussion
..
..       <Insert method summary>
..
..    .. container:: declaration
..
..       <insert method declaration in a code block>
..
..       For iOS, use
..
..       .. example-code::
..
..          .. code-block:: objective-c
..
..             <insert obj-c code>
..
..          .. code-block:: swift
..
..             <insert swift code>
..
..       For other platform, use code block
..
..    .. container:: parameters
..
..       +--------+-------------------------------+
..       | param1 | description                   |
..       +--------+-------------------------------+
..
..    .. container:: retVal
..
..       <discuss return value>
..
..    .. container:: availability
..
..       <discuss when this method is introduced>
..       <discuss when this method is deprecated>
..
..    .. container:: seealso
..
..       <list some useful links here>
..


Crittercism
===========

Import ``com.crittercism.app`` package to use this class.

Initialization
--------------

.. container:: toggle

    .. container:: header

       initialize (context, appID)

    .. container:: discussion

       Initialize Workspace ONE Intelligence SDK.
       After calling this method, crashes and Network Insights information
       will be automatically reported to the Workspace ONE Intelligence servers.
       In addition, all other Workspace ONE Intelligence SDK methods will be
       enabled for use.

    .. container:: declaration

       .. code-block:: java

          public static synchronized void initialize (Context context, String appID)

    .. container:: parameters

       ============ ==========================
       context      An Android Context
       appID        Your unique Workspace ONE Intelligence app ID which can be found on the Workspace ONE Intelligence web portal
       ============ ==========================

.. container:: toggle

    .. container:: header

       initialize (context, appID, config)

    .. container:: discussion

       Initialize Workspace ONE Intelligence SDK.
       After calling this method, crashes and Network Insights information
       will be automatically reported to the Workspace ONE Intelligence servers.
       In addition, all other Workspace ONE Intelligence SDK methods will be
       enabled for use.

    .. container:: declaration

       .. code-block:: java

          public static synchronized void initialize (Context context, String appID, CrittercismConfig config)

    .. container:: parameters

       ============ ==========================
       context      An Android Context
       appID        Your unique Workspace ONE Intelligence app ID which can be found on the Workspace ONE Intelligence web portal
       config       Instance of CrittercismConfig with the desired settings for Workspace ONE Intelligence SDK to use. See :ref:`android_crittercism_config_apm` for further information.
       ============ ==========================


.. _breadcrumbs_android:

Logging Breadcrumbs
-------------------

.. container:: sdk-section-discussion

   .. include:: ../../shared/breadcrumbs_include.txt

.. container:: toggle

    .. container:: header

       leaveBreadcrumb (breadcrumb)

    .. container:: discussion

       Breadcrumbs provide the ability to track activity within your app. A
       breadcrumb is a free form string you supply, which will be timestamped,
       and stored in case a crash occurs. Crash reports will contain the
       breadcrumb trail from the run of your app that crashed, as well as that
       of the prior run.
       
       Userflows will also contain breadcrumbs that are created between the userflow's start and end timestamp.

       Breadcrumbs are limited to 140 characters, and only the most recent 100
       are kept.  
       
       Workspace ONE Intelligence SDK will automatically insert a
       breadcrumb marked ``session_start`` on each initial launch, or
       foreground of your app.

    .. container:: declaration

       .. code-block:: java

          public static void leaveBreadcrumb (String breadcrumb)

    .. container:: parameters

       =========== =============================
       breadcrumb  The custom string to leave a breadcrumb, maximum of 140 characters
       =========== =============================


.. _logging_he_android:

Logging Handled Exceptions
--------------------------

.. _handled_exceptions_android:

.. container:: toggle

    .. container:: header

       logHandledException (exception)

    .. container:: discussion

       .. include:: ../../shared/handled_exceptions_include.txt

       We limit logging handled exceptions to once per minute. If you've logged an
       exception within the last minute, we buffer the last five exceptions and send
       those after a minute has passed.

    .. container:: declaration

       .. code-block:: java

          public static void logHandledException (Throwable t)

    .. container:: parameters

       ========== ================
       exception  Exception to log
       ========== ================

    .. container:: seealso

       * :ref:`Introduction to Handled Exception <handled_exceptions>`


.. _log_network_request:

Logging Network Request
-----------------------

.. container:: sdk-section-discussion

   Network Insignts automatically monitors HTTP traffic generated by
   either ``java.net.HttpURLConnection`` or ``OkHttp`` on devices running
   Android Marshmallow and earlier versions.

   If you are using ``OkHttp`` version 3.3.0 and above,
   please see :ref:`okhttp_instrumentation_android`.

   For other Android versions or networking libraries, you can manually capture
   traffic data and provide it to Workspace ONE Intelligence SDK with the
   following methods:

.. container:: toggle

    .. container:: header

       logNetworkRequest(method, url, latency, bytesRead, bytesSent, responseCode, error)

    .. container:: discussion

       This method allows developers to manually log Network Insights data.
       This is useful for monitoring networking libraries that Workspace ONE
       Intelligence SDK does not itself instrument.

       A network request will NOT be logged in the following cases:

       * A null string is provided for the method parameter.
       * A null URL is provided for the URL parameter.
       * A negative value is provided for the response time parameter.
       * An excessively large value is provided for the response time parameter (i.e., ``System.currentTimeMillis() - responseTimeMillis < 0``).
       * A negative value is provided for the bytes read parameter.
       * A negative value is provided for the bytes sent parameter.

    .. container:: declaration

       .. code-block:: java

          public static void logNetworkRequest(String method,
                                               URL url,
                                               long latency,
                                               long bytesRead,
                                               long bytesSent,
                                               int responseCode,
                                               Exception error)

    .. container:: parameters

       ============ =========================
       method       The connection method, such as GET, POST, HEAD, PUT, DELETE, TRACE, OPTIONS, CONNECT, PATCH
       url          The endpoint URL
       latency      The time between start of request and receipt of response, in milliseconds
       bytesRead    The number of bytes included in response body
       bytesSent    The number of bytes included in request body
       responseCode HTTP status code, generally 100-599, e.g. 200 == OK, 400 == Bad Request, can be 0 if there is an error
       error        Exception instance for a failed request. Null if no error.
       ============ =========================

    .. container:: availability

       Introduced in Android SDK 5.1.0

    .. container:: seealso

       * :ref:`net_stats_android`
       * `Network Insights Best Practices`_

       .. _`Network Insights Best Practices`: https://www.apteligent.com/developer-resources/network-insights-best-practices/

.. container:: toggle

    .. container:: header

       logNetworkRequest(method, urlString, latency, bytesRead, bytesSent, responseCode, error)

    .. container:: discussion

       This method allows developers to manually log Network Insights data.
       This is useful for monitoring networking libraries that Workspace ONE
       Intelligence SDK does not itself instrument.

       A network request will NOT be logged in the following cases:

       * A null string is provided for the method parameter.
       * A null URL is provided for the URL parameter.
       * A negative value is provided for the response time parameter.
       * An excessively large value is provided for the response time parameter (i.e., ``System.currentTimeMillis() - responseTimeMillis < 0``).
       * A negative value is provided for the bytes read parameter.
       * A negative value is provided for the bytes sent parameter.

    .. container:: declaration

       .. code-block:: java

          public static void logNetworkRequest(String method,
                                               String urlString,
                                               long latency,
                                               long bytesRead,
                                               long bytesSent,
                                               int responseCode,
                                               Exception error)

    .. container:: parameters

       ============ =========================
       method       The connection method, such as GET, POST, HEAD, PUT, DELETE, TRACE, OPTIONS, CONNECT, PATCH
       urlString    The endpoint URL in String
       latency      The time between start of request and receipt of response, in milliseconds
       bytesRead    The number of bytes included in response body
       bytesSent    The number of bytes included in request body
       responseCode HTTP status code, generally 100-599, e.g. 200 == OK, 400 == Bad Request, can be 0 if there is an error
       error        Exception instance for a failed request. Null if no error.
       ============ =========================

    .. container:: availability

       Introduced in Android SDK 5.1.0

    .. container:: seealso

       * :ref:`net_stats_android`
       * `Network Insights Best Practices`_

       .. _`Network Insights Best Practices`: https://www.apteligent.com/developer-resources/network-insights-best-practices/

.. _network_update_location_android:

.. container:: toggle

    .. container:: header

       updateLocation (curLocation)

    .. container:: discussion

       Inform Workspace ONE Intelligence SDK of the device's most recent
       location for use with Network Insights.

       If the app uses this method to provide a recent location to the SDK,
       then Network Insights will tie location information to the network data.

       You have the option of updating location information with data given by
       ``android.location.LocationManager.NETWORK_PROVIDER`` or
       ``android.location.LocationManager.GPS_PROVIDER``.
       This allows more accurate data to be sent to the server.

       As explained in the Android Developer Guide, in order to receive location
       updates from the network or GPS provider, your ``AndroidManifest.xml`
       file must include either the ``ACCESS_COARSE_LOCATION`` or
       ``ACCESS_FINE_LOCATION`` permissions.

    .. container:: declaration

       .. code-block:: java

          public static void updateLocation (Location curLocation)

    .. container:: parameters

       ========== =================
       location   Location of the user / device
       ========== =================

    .. container:: availability

       Introduced in Android SDK 4.2.0


.. _metadata_android:

Logging User Metadata
---------------------

.. container:: sdk-section-discussion

   .. include:: ../../shared/user_metadata_include.txt

.. container:: toggle

    .. container:: header

       setUsername (username)

    .. container:: discussion

       .. include:: ../../shared/set_username_include.txt

       Valid inputs are strings with a length of 1 to 32 characters

    .. container:: declaration

       .. code-block:: java

          public static void setUsername (String username)

    .. container:: parameters

       ========== =================
       username   The new username
       ========== =================


.. _userflows_android:

Logging User Flows
------------------

.. container:: sdk-section-discussion

   User flows allow developers to track key interactions or user flows in their
   app such as login, account registration, and in app purchase.

   For an introduction, see :ref:`userflows`.

.. container:: toggle

    .. container:: header

       beginUserFlow (name)

    .. container:: discussion

       Init and begin a user flow with a default value.

       .. include:: ../../shared/userflows_include.txt

    .. container:: declaration

       .. code-block:: java

          public static void beginUserFlow (String name)

    .. container:: parameters

       ====== =============
       name   The name of the user flow
       ====== =============

    .. container:: seealso

       * :ref:`Introduction to User Flows <userflows>`
       * `Three Ways to Improve User Experience through User Flows`_
       * `Tracking User Experience with Advanced User Flows`_

       .. _Three Ways to Improve User Experience through User Flows: https://www.apteligent.com/developer-resources/three-ways-to-improve-user-experience-through-userflows/
       .. _Tracking User Experience with Advanced User Flows: https://www.apteligent.com/developer-resources/part-2-tracking-user-experience-with-advanced-userflows/

.. _cancel_userflow_android:

.. container:: toggle

    .. container:: header

       cancelUserFlow (name)

    .. container:: discussion

       Cancel a user flow as if it never existed. The userflow will not be reported.

    .. container:: declaration

       .. code-block:: java

          public static void cancelUserFlow (String name)

    .. container:: parameters

       ====== =============
       name   The name of the user flow
       ====== =============

.. container:: toggle

    .. container:: header

       endUserFlow (name)

    .. container:: discussion

       End an already begun user flow successfully.

    .. container:: declaration

       .. code-block:: java

          public static void endUserFlow (String name)

    .. container:: parameters

       ====== =============
       name   The name of the user flow
       ====== =============

.. container:: toggle

    .. container:: header

       failUserFlow (name, failureReason)

    .. container:: discussion

       End an already begun user flow as a failure, and give a reason why it failed.

    .. container:: declaration

       .. code-block:: java

          public static void failUserFlow (String name)

    .. container:: parameters

       ============= ================================
       name          The name of the user flow.
       failureReason The reason the user flow failed.
       ============= ================================

.. container:: toggle

    .. container:: header

       failUserFlow (name)

    .. container:: discussion

       End an already begun user flow as a failure.

    .. container:: declaration

       .. code-block:: java

          public static void failUserFlow (String name)

    .. container:: parameters

       ====== =============
       name   The name of the user flow
       ====== =============

.. container:: toggle

    .. container:: header

       setUserFlowValue (name, value)

    .. container:: discussion

       Set the currency cents value of a user flow.

    .. container:: declaration

       .. code-block:: java

          public static void setUserFlowValue (String name, int value)

    .. container:: parameters

       ====== ========================
       value  The value of the user flow
       name   The name of the user flow
       ====== ========================

.. container:: toggle

    .. container:: header

       getUserFlowValue (name)

    .. container:: discussion

       Get the currency cents value of a user flow.

    .. container:: declaration

       .. code-block:: java

          public static int getUserFlowValue (String name)

    .. container:: parameters

       ====== =============
       name   The name of the user flow
       ====== =============


.. _android_detect_crash:

Detecting a Crash Occurred
--------------------------

.. container:: toggle

    .. container:: header

       getPreviousSessionCrashData (crashListener)

    .. container:: discussion

       Submit a callback to this method to get crash data from the previous session.
       The callback will receive crash information, see :ref:`android_crash_data` for details.

    .. container:: declaration

       .. code-block:: java

          public static void getPreviousSessionCrashData (CrittercismCallback<CrashData> crashListener)

    .. container:: seealso

       * :ref:`android_crittercism_callback`
       * :ref:`android_crash_data`

.. container:: toggle

    .. container:: header

       didCrashOnLastLoad ()

    .. container:: declaration

       .. code-block:: java

          public static boolean didCrashOnLastLoad ()

    .. container:: retval

       Returns ``True`` if the app crashed on the last load, returns ``False`` otherwise.


.. _delay_sending_app_load_android:

Delay Sending App Load Data
----------------------------

.. container:: toggle

    .. container:: header

       sendAppLoadData ()

    .. container:: discussion

       Tell Workspace ONE Intelligence SDK to send an app load event that was
       delayed. By default, Workspace ONE Intelligence SDK sends app load events
       automatically when your app is started. However, if you set
       ..:ref:`delaySendingAppLoad <delay_sending_app_load>`
       flag to ``True`` on config, you can call this method to manually send app
       load events later.

    .. container:: declaration

       .. code-block:: java

          public static void sendAppLoadData ()

    .. container:: seealso

       * :ref:`delay_sending_app_load`


.. _okhttp_instrumentation_android:

Instrumenting OkHttpClient (Beta)
---------------------------------

.. container:: sdk-section-discussion

   Workspace ONE Intelligence Android SDK offers users the ability to instrument
   OkHttpClients to collect network insights.

.. container:: toggle

   .. container:: header

      getNetworkInstrumentation()

   .. container:: discussion

      Enables OkHttpClient instrumentation to collect network insights.
      It must be called on the main UI thread after the OkHttpClient is set.
      Once the method is invoked, Workspace ONE Intelligence SDK will
      automatically log network calls made with the returned instrumented client
      to the Network Insights page of the Workspace ONE Intelligence portal.

      Here's an example of how to instrument a client:

      .. code-block:: java

          OkHttpClient uninstrumentedClient = new OkHttpClient();
          OkHttpClient instrumentedClient = Crittercism.getNetworkInstrumentation().instrumentOkHttpClient(uninstrumentedClient);
          // now you can use the instrumented client for network calls (on a different thread)
          instrumentedClient.newCall(...).execute();


    .. container:: declaration

       .. code-block:: java

          public static NetworkInstrumentor getNetworkInstrumentation()

   .. container:: availability

      Introduced in Workspace ONE Intelligence Android SDK 5.8.11-beta11.
      Requires OkHttp 3.3.0 and above.


.. _webview_instrumentation_android:

Instrumenting WebView
---------------------

.. container:: sdk-section-discussion

   Workspace ONE Intelligence Android SDK offers users the ability to instrument
   WebViews.
   This method only works for WebViews where JavaScript has already been
   enabled.

.. container:: toggle

   .. container:: header

      instrumentWebView (webView)

   .. container:: discussion

      Enables WebViews instrumentation. This method only works if JavaScript has
      already been enabled. It must be called on the UI thread after the
      WebViewClient is set and before the webpage is loaded. Once the method is
      invoked, Workspace ONE Intelligence SDK will automatically log any
      uncaught JavaScript exceptions to the Handled Exceptions page of the
      Workspace ONE Intelligence portal.

      Here's an example of how to configure and instrument a WebView:

      .. code-block:: java

          // 1) Optionally set your own WebViewClient.
          myWebView.setWebViewClient(myWebViewClient);

          // 2) Enable JavaScript.
          myWebView.getSettings().setJavaScriptEnabled(true);

          // 3) Instrument WebView.
          Crittercism.instrumentWebView(myWebView);

      .. note::

          :ref:`webview_instrumentation_android` must be enabled in
          :ref:`hybrid_apps_html5` in order for API calls of Workspace ONE
          Intelligence SDK in the JavaScript code layer to communicate with the
          native code layer.

    .. container:: declaration

       .. code-block:: java

          public static void instrumentWebView(WebView webView)

   .. container:: availability

      Introduced in Android SDK 5.3.0


.. _opt_out_android:

Opt In Status
--------------

.. container:: sdk-section-discussion

   .. include:: ../../shared/opt_out_include.txt

.. container:: toggle

    .. container:: header

       getOptInStatus (telemetryType)

    .. container:: discussion

       Retrieve current opt-in status for the specified telemetry type.

    .. container:: declaration

       .. code-block:: java

          public static boolean getOptInStatus(final TelemetryType telemetryType)

    .. container:: retval

       Return ``True`` if the current opt-in state allows reporting Workspace ONE
       Intelligence SDK data for the specified telemetry type.

.. container:: toggle

    .. container:: header

       setOptInStatus (telemetryType, isOptedIn)

    .. container:: discussion

       If you wish to offer your users the ability to opt out of Workspace ONE
       Intelligence SDK's reporting, you can set the OptInStatus for TelemetryType 'Application' to ``false``. 
       There will be no information/requests sent from that user's app.
       If you do so, any pending crash reports will be purged.

       If you wish to offer your users the ability to opt out of Workspace ONE
       Intelligence SDK's DEX Telemetry reporting, you can set the OptInStatus for TelemetryType 'DEX' to ``false``. 
       No more device information will be sent from that user's app.
       
       Typically, a developer would connect these API calls to checkboxes in a
       settings menu.

    .. container:: declaration

       .. code-block:: java

          public static void setOptInStatus(final TelemetryType telemetryType, final boolean isOptedIn)

    .. container:: parameters

       ============= ================
       isOptedIn     set to ``False`` to disable Workspace ONE Intelligence SDK's reporting for the specified TelemetryType
       ------------- ----------------
       telemetryType use Crittercism.TelemetryType.APPLICATION for crash, exceptions, userflows, breadcrumbs and network insights
                     
                     use Crittercism.TelemetryType.DEX for device Digital Employee Experience information
       ============= ================


.. _android_tune_logging:

Setting Log Verbosity of Workspace ONE Intelligence SDK
-------------------------------------------------------

.. container:: sdk-section-discussion

   By default, Workspace ONE Intelligence SDK prints a few messages to the
   device logcat that may be useful to verify that Workspace ONE Intelligence
   SDK is initialized and properly working.  You can tune the amount of log
   messages that Workspace ONE Intelligence displays.

.. container:: toggle

    .. container:: header

       getLoggingLevel ()

    .. container:: declaration

       .. code-block:: java

          public static LoggingLevel getLoggingLevel ()

    .. container:: retval

       The current logging level of the verbosity of log messages of Workspace
       ONE Intelligence SDK.

    .. container:: seealso

       * :ref:`Logging Level Constants <android_logging_level_constants>`

.. container:: toggle

    .. container:: header

       setLoggingLevel (loggingLevel)

    .. container:: discussion

       Set the logging level to tune the verbosity of log messages of Workspace
       ONE Intelligence.
       The default value is ``Crittercism.LoggingLevel.Warning``.

       See :ref:`Logging Level Constants <android_logging_level_constants>`

    .. container:: declaration

       .. code-block:: java

          public static void setLoggingLevel (LoggingLevel loggingLevel)

    .. container:: parameters

       ============= =======================
       loggingLevel  The verbosity of Workspace ONE Intelligence SDK logging
       ============= =======================

    .. container:: seealso

       * :ref:`Logging Level Constants <android_logging_level_constants>`

.. _android_logging_level_constants:

.. container:: toggle

    .. container:: header

       Crittercism.LoggingLevel

    .. container:: discussion

       Enum used to describe Workspace ONE Intelligence SDK logging level.

    .. container:: declaration

       .. code-block:: java

          public enum LoggingLevel {
              Silent,
              Error,
              Warning,
              Info,
              Debug }

    .. container:: constants

         ==================================== =======================================================================================
         ``Crittercism.LoggingLevel.Silent``  Turns off all log messages from Workspace ONE Intelligence SDK.

         ``Crittercism.LoggingLevel.Error``   Only print errors form Workspace ONE Intelligence SDK. An error is an unexpected event that will result not capturing important data.

         ``Crittercism.LoggingLevel.Warning`` Only print warnings from Workspace ONE Intelligence SDK.

         ``Crittercism.LoggingLevel.Info``    *(Default)* Print more verbose info logs.

         ``Crittercism.LoggingLevel.Debug``    The most verbose level of logging, used to print Workspace ONE Intelligence SDK debug logs.

         ==================================== =======================================================================================

    .. container:: seealso

       * :ref:`android_tune_logging`
