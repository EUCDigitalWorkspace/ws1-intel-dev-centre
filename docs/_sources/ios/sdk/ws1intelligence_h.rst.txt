.. To add a method in this file, please use the following format.
..
.. In general, each method needs to be enclosed in .. container:: toggle
.. In toggle container, we have header (required), discussion (optional),
.. declaration (optional), parameters (optional), retval (optional),
.. availability (optional).
..
.. If a method is deprecated, you can mark the header as deprecated.
.. So you would have .. container :: header deprecated
..
.. .. container:: toggle
..
..    .. container:: header
..
..       <insert method name here>
..
..    .. container:: discussion
..
..       <Insert method summary>
..
..    .. container:: declaration
..
..       <insert method declaration in a code block>
..
..       For iOS, use
..
..       .. example-code::
..
..          .. code-block:: objective-c
..
..             <insert obj-c code>
..
..          .. code-block:: swift
..
..             <insert swift code>
..
..       For other platform, use code block
..
..    .. container:: parameters
..
..       +--------+-------------------------------+
..       | param1 | description                   |
..       +--------+-------------------------------+
..
..    .. container:: retVal
..
..       <discuss return value>
..
..    .. container:: availability
..
..       <discuss when this method is introduced>
..       <discuss when this method is deprecated>
..
..    .. container:: seealso
..
..       <list some useful links here>
..


WS1Intelligence
===============

Initialization
--------------

.. container:: toggle

    .. container:: header

       \+ enable

    .. container:: discussion

       Initializes Workspace ONE Intelligence SDK. This method will use the app ID string 
       value specified in the application's info.plist file with the key 'WS1IntelligenceAppID'

    .. container:: declaration

       Objective-C

       .. code-block:: objective-c

          + (void)enable

       Swift
       
       .. code-block:: swift

          class func enable()

.. container:: toggle

    .. container:: header

       \+ enableWithConfig:

    .. container:: discussion

       Initializes Workspace ONE Intelligence SDK with a config. This method will use the app ID string 
       value specified in the application's info.plist file with the key 'WS1IntelligenceAppID'
       After this call completes, changes to the config object will have no affect on the behavior of
       Workspace ONE Intelligence SDK.

    .. container:: declaration

       Objective-C

       .. code-block:: objective-c

          + (void)enableWithConfig:(WS1Config *)config

       Swift
       
       .. code-block:: swift

          class func enable(withConfig: config)

    .. container:: parameters

       +--------+-------------------------------+
       | config | Your custom WS1Config         |
       +--------+-------------------------------+


.. container:: toggle

    .. container:: header

       \+ enableWithAppID:

    .. container:: discussion

       Initializes Workspace ONE Intelligence SDK with the given App ID (found
       on the Workspace ONE Intelligence web portal).

    .. container:: declaration

       Objective-C

       .. code-block:: objective-c

          + (void)enableWithAppID:(NSString *)appId

       .. code-block:: swift

          class func enable(withAppID: appID)

    .. container:: parameters

       +--------+-------------------------------+
       | appId  | Your iOS appId                |
       +--------+-------------------------------+

.. container:: toggle

    .. container:: header

       \+ enableWithAppID:config:

    .. container:: discussion

       Initializes Workspace ONE Intelligence SDK with the given App ID (found
       on the Workspace ONE Intelligence web portal). After this call completes,
       changes to the config object will have no affect on the behavior of
       Workspace ONE Intelligence SDK.

    .. container:: declaration

       Objective-C

       .. code-block:: objective-c

          + (void)enableWithAppID:(NSString *)appId config:(WS1Config *)config

       Swift
       
       .. code-block:: swift

          class func enable(withAppID: appID,
                               config: ws1Config)

    .. container:: parameters

       +--------+-------------------------------+
       | appId  | Your iOS appId                |
       +--------+-------------------------------+
       | config | Your custom WS1Config         |
       +--------+-------------------------------+


.. _breadcrumbs_ios_ws1:

Logging Breadcrumbs
-------------------

.. container:: sdk-section-discussion

   .. include:: ../../shared/breadcrumbs_include.txt


.. container:: toggle

    .. container:: header

       \+ leaveBreadcrumb:

    .. container:: discussion

       Breadcrumbs provide the ability to track activity within your app. A breadcrumb
       is a free form string you supply, which will be timestamped. Crash events, or other
       events, may refer to these for additional diagnostic details.

       Breadcrumbs are limited to 140 characters.

    .. container:: declaration

       Objective-C

       .. code-block:: objective-c

          + (void)leaveBreadcrumb:(NSString *)breadcrumb

       Swift
       
       .. code-block:: swift

          class func leaveBreadcrumb(breadcrumb: String)

    .. container:: parameters

       +-------------+---------------------------------------------------------------------+
       | breadcrumb  | The custom string to leave a breadcrumb, maximum of 140 characters  |
       +-------------+---------------------------------------------------------------------+

.. container:: toggle

    .. container:: header

       \+ setAsyncBreadcrumbMode:

    .. container:: discussion

       By default, breadcrumbs are flushed to disk immediately when written. This is by design - in order to provide an accurate record of everything that happened up until the point your app crashed. To improve performance you can instruct the library to perform all breadcrumb writes on a background thread. This means that breadcrums are not guaranteed to be saved immediately prior to a crash.

    .. container:: declaration

       .. code-block:: objective-c

          + (void)setAsyncBreadcrumbMode:(BOOL)writeAsync

       Swift
       
       .. code-block:: swift

          class func setAsyncBreadcrumbMode(writeAsync: Bool)

    .. container:: parameters

       +-------------+--------------------------------------------------+
       | writeAsync  | YES to write breadcrumbs in a background thread  |
       +-------------+--------------------------------------------------+

    .. container:: seealso

       * :ref:`Introduction to Breadcrumbs <breadcrumbs>`


.. _logging_errors_and_he_ios_ws1:

Logging Errors and Handled Exceptions
-------------------------------------

.. _errors_ios_ws1:

.. container:: toggle

    .. container:: header

       \+ logError:

    .. container:: discussion

       .. include:: ../../shared/errors_include.txt

    .. container:: declaration

      Objective-C

       .. code-block:: objective-c

          + (BOOL)logError:(NSError *)error;

       Swift
       
       .. code-block:: swift

          class func logError(error: Error)

    .. container:: parameters

       +--------+-----------------+
       | error  | Error to log    |
       +--------+-----------------+

.. container:: toggle

    .. container:: header

       \+ logError:stacktrace:

    .. container:: discussion

       .. include:: ../../shared/errors_include.txt

    .. container:: declaration

       Objective-C

       .. code-block:: objective-c

          + (BOOL)logError:(NSError *)error stacktrace:(NSArray *)stacktrace;

       Swift
       
       .. code-block:: swift

          class func logError(error: Error stacktrace: Stacktrace)

    .. container:: parameters

       +-------------+-----------------------------------------------+
       | error       | Error to log                                  |
       +-------------+-----------------------------------------------+
       | stacktrace  | Array of strings representing a stacktrace    |
       +-------------+-----------------------------------------------+
    .. container:: availability

       Introduced in SDK v5.9.1

.. _handled_exceptions_ios_ws1:

.. container:: toggle

    .. container:: header

       \+ logHandledException:

    .. container:: discussion

       .. include:: ../../shared/handled_exceptions_include.txt

    .. container:: declaration

       Objective-C

       .. code-block:: objective-c

          + (BOOL)logHandledException:(NSException *)exception

       Swift
       
       .. code-block:: swift

          class func logHandledException(exception: NSException)

    .. container:: parameters

       +------------+-------------------------------+
       | exception  | Exception to log              |
       +------------+-------------------------------+

    .. container:: seealso

       * :ref:`Introduction to Handled Exception <handled_exceptions>`

.. _network_requests_ios_ws1:

Logging Network Request
-----------------------

.. container:: sdk-section-discussion

   Network Insights data for ``NSURLSession`` and ``NSURLConnection`` is
   automatically captured and reported to Workspace ONE Intelligence simply by
   initializing the SDK. See :ref:`net_stats_ios`

   If you want to log network requests manually or customize what data gets
   reported, use these methods.


.. container:: toggle

    .. container:: header

       \+ addFilter:

    .. container:: discussion

       Adds an additional filter for network instrumentation.

    .. container:: declaration

       Objective-C

       .. code-block:: objective-c

          + (void)addFilter:(WS1Filter *)filter

       Swift
       
       .. code-block:: swift

          class func add(filter: WS1Filter)

    .. container:: parameters

       +--------+--------------------------------+
       | filter | WS1Filter filter to add        |
       +--------+--------------------------------+

.. container:: toggle

    .. container:: header

       \+ logNetworkRequest:url:latency:bytesRead:bytesSent:responseCode:error:

    .. container:: discussion

       Logging endpoints is a way of manually logging Network Insights data for
       custom network libraries which fall outside Workspace ONE Intelligence's
       monitoring of NSURLConnection and NSURLSession method
       calls.

    .. container:: declaration

       Objective-C

       .. code-block:: objective-c

          + (BOOL)logNetworkRequest:(NSString *)method
                                url:(NSURL *)url
                            latency:(NSTimeInterval)latency
                          bytesRead:(NSUInteger)bytesRead
                          bytesSent:(NSUInteger)bytesSent
                       responseCode:(NSInteger)responseCode
                              error:(NSError *)error

       Swift
       
       .. code-block:: swift

          class func logNetworkRequest(method: String,
                                      url url: NSURL,
                              latency latency: NSTimeInterval,
                          bytesRead bytesRead: Int,
                          bytesSent bytesSent: Int,
                    responseCode responseCode: Int,
                                  error error: NSError) -> Bool

    .. container:: parameters

       +--------------+----------------------------------------------------------------------------------------------------------------+
       | method       | The connection method, such as GET, POST, HEAD, PUT, DELETE, TRACE, OPTIONS, CONNECT, PATCH                    |
       +--------------+----------------------------------------------------------------------------------------------------------------+
       | url          | The endpoint URL                                                                                               |
       +--------------+----------------------------------------------------------------------------------------------------------------+
       | latency      | The time between start of request and receipt of response, in seconds                                          |
       +--------------+----------------------------------------------------------------------------------------------------------------+
       | bytesRead    | The number of bytes included in response body                                                                  |
       +--------------+----------------------------------------------------------------------------------------------------------------+
       | bytesSent    | The number of bytes included in request body                                                                   |
       +--------------+----------------------------------------------------------------------------------------------------------------+
       | responseCode | HTTP status code, generally 100-599, e.g. 200 == OK, 400 == Bad Request, can be 0 if there is an error         |
       +--------------+----------------------------------------------------------------------------------------------------------------+
       | error        | A non-nil error can be logged if network request failed to contact server, etc. Pass nil if there was no error |
       +--------------+----------------------------------------------------------------------------------------------------------------+

    .. container:: retVal

       Returns YES if the request was properly logged. Returns NO otherwise.

    .. container:: seealso

       * :ref:`net_stats_ios`
       * `Network Insights Best Practices`_

       .. _`Network Insights Best Practices`: https://www.apteligent.com/developer-resources/network-insights-best-practices/

.. container:: toggle

    .. container:: header

       \+ logNetworkRequest:urlString:latency:bytesRead:bytesSent:responseCode:error:

    .. container:: discussion

       Logging endpoints is a way of manually logging Network Insights data for
       custom network libraries which fall outside Workspace ONE Intelligence's
       monitoring of NSURLConnection and NSURLSession method
       calls.

    .. container:: declaration

       Objective-C

       .. code-block:: objective-c

          + (BOOL)logNetworkRequest:(NSString *)method
                          urlString:(NSString *)urlString
                            latency:(NSTimeInterval)latency
                          bytesRead:(NSUInteger)bytesRead
                          bytesSent:(NSUInteger)bytesSent
                       responseCode:(NSInteger)responseCode
                              error:(NSError *)error

       Swift
       
       .. code-block:: swift

          class func logNetworkRequest(method: String,
                          urlString urlString: NSString,
                              latency latency: NSTimeInterval,
                          bytesRead bytesRead: Int,
                          bytesSent bytesSent: Int,
                    responseCode responseCode: Int,
                                  error error: NSError) -> Bool

    .. container:: parameters

       +--------------+----------------------------------------------------------------------------------------------------------------+
       | method       | The connection method, such as GET, POST, HEAD, PUT, DELETE, TRACE, OPTIONS, CONNECT, PATCH                    |
       +--------------+----------------------------------------------------------------------------------------------------------------+
       | urlString    | The endpoint URL in string                                                                                     |
       +--------------+----------------------------------------------------------------------------------------------------------------+
       | latency      | The time between start of request and receipt of response, in seconds                                          |
       +--------------+----------------------------------------------------------------------------------------------------------------+
       | bytesRead    | The number of bytes included in response body                                                                  |
       +--------------+----------------------------------------------------------------------------------------------------------------+
       | bytesSent    | The number of bytes included in request body                                                                   |
       +--------------+----------------------------------------------------------------------------------------------------------------+
       | responseCode | HTTP status code, generally 100-599, e.g. 200 == OK, 400 == Bad Request, can be 0 if there is an error         |
       +--------------+----------------------------------------------------------------------------------------------------------------+
       | error        | A non-nil error can be logged if network request failed to contact server, etc. Pass nil if there was no error |
       +--------------+----------------------------------------------------------------------------------------------------------------+

    .. container:: retVal

       Returns YES if the request was properly logged. Returns NO otherwise.

.. _network_update_location_ios_ws1:

.. container:: toggle

    .. container:: header

       \+ updateLocationToLatitude:longitude:

    .. container:: discussion

       Inform Workspace ONE Intelligence SDK of the device's most recent
       location for use with event reporting.

    .. container:: declaration

       Objective-C

       .. code-block:: objective-c

          + (void)updateLocationToLatitude:(double)location longitude:(double)longitude

       Swift
       
       .. code-block:: swift

          class func updateLocation(toLatitude: double, longitude: double)

    .. container:: parameters

       +-----------+-------------------------------+
       | latitude  | Location of the user / device |
       +-----------+-------------------------------+
       | longitude | Location of the user / device |
       +-----------+-------------------------------+

    .. container:: availability

       Introduced in SDK v5.9.3

.. _username_ios:

Setting Username
---------------------

.. container:: sdk-section-discussion

   This interface sets a relationship between a provided username string and the device UUID.

.. container:: toggle

    .. container:: header

       \+ setUsername:

    .. container:: declaration

       Objective-C

       .. code-block:: objective-c

          + (void)setUsername:(NSString *)username

       Swift
       
       .. code-block:: swift

          class func setUsername(username: String)

    .. container:: parameters

       +-----------+----------------------------+
       | username  | The new username           |
       +-----------+----------------------------+

.. _userflows_ios_ws1:

Logging User Flows
------------------

.. container:: sdk-section-discussion

   User flows allow developers to track key interactions or user flows in their
   app such as login, account registration, and in app purchase.

   For an introduction, see :ref:`userflows`.

.. container:: toggle

    .. container:: header

       \+ beginUserFlow:

    .. container:: discussion

       Inititializes and begins a user flow

       .. include:: ../../shared/userflows_include.txt

    .. container:: declaration

       Objective-C

       .. code-block:: objective-c

          + (void)beginUserFlow:(NSString *)name

       Swift
       
       .. code-block:: swift

          class func beginUserFlow(name: String)

    .. container:: parameters

       +--------+-------------------------------+
       | name   | The name of the user flow     |
       +--------+-------------------------------+

    .. container:: seealso

       * :ref:`Introduction to User Flows <userflows>`
       * `Three Ways to Improve User Experience through User Flows`_
       * `Tracking User Experience with Advanced User Flows`_

.. container:: toggle

    .. container:: header

       \+ beginUserFlow:timeout:

    .. container:: discussion

       Inititializes and begins a user flow with a specified timeout. If the user flow
       is not otherwise completed before this time elapses, the user flow will be marked
       as timed out.

       .. include:: ../../shared/userflows_include.txt

    .. container:: declaration

       Objective-C

       .. code-block:: objective-c

          + (void)beginUserFlow:(NSString *)name
                        timeout:(NSTimeInterval)timeout

       Swift
       
       .. code-block:: swift

          class func beginUserFlow(name: String timeout: TimeInterval)

    .. container:: parameters

       +---------+---------------------------------------+
       | name    | The name of the user flow             |
       +---------+---------------------------------------+
       | timeout | Timeout for this user flow in seconds |
       +---------+---------------------------------------+

    .. container:: seealso

       * :ref:`Introduction to User Flows <userflows>`
       * `Three Ways to Improve User Experience through User Flows`_
       * `Tracking User Experience with Advanced User Flows`_

       .. _Three Ways to Improve User Experience through User Flows: https://www.apteligent.com/developer-resources/three-ways-to-improve-user-experience-through-userflows/
       .. _Tracking User Experience with Advanced User Flows: https://www.apteligent.com/developer-resources/part-2-tracking-user-experience-with-advanced-userflows/


.. container:: toggle

    .. container:: header

       \+ cancelUserFlow:

    .. container:: discussion

       Cancel a user flow as if it never existed. The user flow will not be reported.

    .. container:: declaration

       Objective-C

       .. code-block:: objective-c

          + (void)cancelUserFlow:(NSString *)name

       Swift
       
       .. code-block:: swift

          class func cancelUserFlow(name: String)

    .. container:: parameters

       +--------+-------------------------------+
       | name   | The name of the user flow     |
       +--------+-------------------------------+

.. container:: toggle

    .. container:: header

       \+ endUserFlow:

    .. container:: discussion

       End an already begun user flow successfully.

    .. container:: declaration

       Objective-C

       .. code-block:: objective-c

          + (void)endUserFlow:(NSString *)name

       Swift
       
       .. code-block:: swift

          class func endUserFlow(name: String)

    .. container:: parameters

       +--------+-------------------------------+
       | name   | The name of the user flow     |
       +--------+-------------------------------+

.. container:: toggle

    .. container:: header

       \+ failUserFlow:

    .. container:: discussion

       End an already begun user flow as a failure.

    .. container:: declaration

       Objective-C

       .. code-block:: objective-c

          + (void)failUserFlow:(NSString *)name

       Swift
       
       .. code-block:: swift

          class func failUserFlow(name: String)

    .. container:: parameters

       +--------+-------------------------------+
       | name   | The name of the user flow     |
       +--------+-------------------------------+

.. _ws1_crash_occured:

Detecting a Crash Occurred
--------------------------

.. container:: sdk-section-discussion

   You can listen to :ref:`WS1NotificationDidCrashOnLastLoad <lastCrashNotification_ios_ws1>`
   to get more app crash information on the previous run.


.. container:: toggle

    .. container:: header

       \+ didCrashOnLastLoad:

    .. container:: declaration

       Objective-C

       .. code-block:: objective-c

          + (BOOL)didCrashOnLastLoad

       Swift
       
       .. code-block:: swift

          class func didCrashOnLastLoad -> Bool

    .. container:: retval

       Returns YES if the app crashed on the last load, returns NO otherwise.

    .. container:: seealso

       * :ref:`WS1NotificationDidCrashOnLastLoad <lastCrashNotification_ios_ws1>`
       * :ref:`Last Crash UserInfo Keys <lastCrashUserInfo_ios_ws1>`


.. _opt_out_ios_ws1:

Opt Out Status
--------------

.. container:: sdk-section-discussion

   .. include:: ../../shared/opt_out_include.txt


.. container:: toggle

    .. container:: header

       \+ getOptOutStatus

    .. container:: discussion

       Retrieve current opt out status.

    .. container:: declaration

       Objective-C

       .. code-block:: objective-c

          + (BOOL)getOptOutStatus

       Swift
       
       .. code-block:: swift

          class func getOptOutStatus -> Bool

    .. container:: retval

       Return ``YES`` if the user has opted out of reporting Workspace ONE
       Intelligence data.

.. container:: toggle

    .. container:: header

       \+ setOptOutStatus:

    .. container:: discussion

       If you wish to offer your users the ability to opt out of Workspace ONE
       Intelligence data reporting, you can set the OptOutStatus to YES.
       If you do so, there will be no information/requests sent from
       that user's app and any pending crash reports will be purged.

       Typically, a developer would connect this API call to a checkbox in a
       settings menu.

    .. container:: declaration

       Objective-C

       .. code-block:: objective-c

          + (void)setOptOutStatus:(BOOL)status

       Swift
       
       .. code-block:: swift

          class func setOptOutStatus(status: Bool)

    .. container:: parameters

       +--------+--------------------------------------------------+
       | status | set to YES to disable Workspace ONE Intelligence |
       +--------+--------------------------------------------------+


.. _ios_tune_logging_ws1:

Setting Log Verbosity Of Workspace ONE Intelligence SDK
-------------------------------------------------------

.. container:: toggle

    .. container:: header

       \+ loggingLevel

    .. container:: declaration

       Objective-C

       .. code-block:: objective-c

          + (WS1IntelligenceLoggingLevel)loggingLevel

       Swift
       
       .. code-block:: swift

          class func loggingLevel() -> WS1IntelligenceLoggingLevel

    .. container:: retval

       The current logging level of the verbosity of Workspace ONE Intelligence
       SDK log messages.

.. container:: toggle

    .. container:: header

       \+ setLoggingLevel:

    .. container:: discussion

       Set the logging level to tune the verbosity log messages from Workspace
       ONE Intelligence SDK.  The default value is ``WS1IntelligenceLoggingLevelWarning``.

       See :ref:`ws1_logging_level` to see various logging levels.

    .. container:: declaration

       Objective-C

       .. code-block:: objective-c

          + (void)setLoggingLevel:(WS1IntelligenceLoggingLevel)loggingLevel

       Swift
       
       .. code-block:: swift

          class func setLoggingLevel(loggingLevel: WS1IntelligenceLoggingLevel)

    .. container:: parameters

       +--------------+-----------------------------------------------------+
       | loggingLevel | The log verbosity of Workspace ONE Intelligence SDK |
       +--------------+-----------------------------------------------------+

.. _device_uuid_ios_ws1:

Workspace ONE Intelligence Device UUID
--------------------------------------

.. container:: toggle

    .. container:: header

       \+ getUserUUID

    .. container:: discussion

       Get the unique identifier for this device generated by Workspace ONE
       Intelligence SDK.  This is **NOT** the device's UDID.

       If called before enabling the SDK, this will return an empty string.
       All Workspace ONE Intelligence enabled apps on a device will share the
       UUID created by the first installed Workspace ONE Intelligence enabled
       app.

       If all Workspace ONE Intelligence enabled applications are removed from
       a device, a new UUID will be generated when the next one is installed.

    .. container:: declaration

       Objective-C

       .. code-block:: objective-c

          + (NSString *)getUserUUID

       Swift

       .. code-block:: swift

          class func getUserUUID -> String
