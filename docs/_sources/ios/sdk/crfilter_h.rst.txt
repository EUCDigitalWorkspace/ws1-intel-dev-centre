.. To add a method in this file, please use the following format.
..
.. In general, each method needs to be enclosed in .. container:: toggle
.. In toggle container, we have header (required), discussion (optional),
.. declaration (optional), parameters (optional), retval (optional),
.. availability (optional).
..
.. If a method is deprecated, you can mark the header as deprecated.
.. So you would have .. container :: header deprecated
..
.. .. container:: toggle
..
..    .. container:: header
..
..       <insert method name here>
..
..    .. container:: discussion
..
..       <Insert method summary>
..
..    .. container:: declaration
..
..       <insert method declaration in a code block>
..
..       For iOS, use
..
..       .. example-code::
..
..          .. code-block:: objective-c
..
..             <insert obj-c code>
..
..          .. code-block:: swift
..
..             <insert swift code>
..
..       For other platform, use code block
..
..    .. container:: parameters
..
..       +--------+-------------------------------+
..       | param1 | description                   |
..       +--------+-------------------------------+
..
..    .. container:: retVal
..
..       <discuss return value>
..
..    .. container:: availability
..
..       <discuss when this method is introduced>
..       <discuss when this method is deprecated>
..
..    .. container:: seealso
..
..       <list some useful links here>
..

.. _crfilter_ios:

CRFilter
========

By default, Workspace ONE Intelligence SDK reports Network Insights data for all
URLs that are accessed by your app and strips each URL of any query parameters.
For example, ``http://foo.com?name=critter`` becomes ``http://foo.com``.
This is done to ensure personal information is not transmitted to Workspace ONE
Intelligence.

It is also possible to customise filter denylists that will completely
discard matching URLs. Network Insights data that pertains to any URL that
matches the deny URL will not be reported to Workspace ONE Intelligence.

Use the ``[CRFilter filterWithString:]`` to modify the default filtering
behavior:

Objective-C

.. code-block:: objective-c

   // Add filters at initialization
   CrittercismConfig *config = [CrittercismConfig defaultConfig];
   config.urlFilters = @[[CRFilter filterWithString:@"sensitiveURL"],
                         [CRFilter filterWithString:@"additionalURL"]];
   [Crittercism enableWithAppID:@"MYAPPID" andConfig:config];

   // Add filters later on
   [Crittercism addFilter:[CRFilter filterWithString:@"anotherURL"]];

Swift

.. code-block:: swift

   // Add filters at initialization
   let config : CrittercismConfig = CrittercismConfig.default()
   config.urlFilters = [CRFilter(string: "sensitiveURL"), CRFilter(string: "additionalURL")]
   Crittercism.enable(withAppID: appID, and config: config)

   // Add filters later on
   Crittercism.add(filter: CRFilter)

.. note::

   * Filters match URLs via **case sensitive** substring matching

   * Older versions of the agent did not scrub query parameters by default, and
     so a ```queryOnlyFilter``` existed. To avoid compile time errors for
     existing Workspace ONE Intelligence users, this filter type can still be
     created, but it will be ignored by the library. This filter type is deprecated, and will be removed
     in a future version of the agent.

Creating a Filter
-----------------

.. container:: toggle

    .. container:: header

       \+ filterWithString:

    .. container:: discussion

       Convenience method to create a deny filter.

    .. container:: declaration

       Objective-C

       .. code-block:: objective-c

          + (CRFilter *)filterWithString:(NSString *)matchToken;

       Swift

       .. code-block:: swift

          class func filter(withString: matchToken)

    .. container:: parameters

       +-------------+-------------------------------------+
       | matchToken  | An NSString of the url to filter    |
       +-------------+-------------------------------------+

    .. container:: retVal

       A CRFilter object for matchToken.

.. container:: toggle

    .. container:: header deprecated

       \+ queryPreservingFilterWithString:

    .. container:: discussion

       Convenience method to create a filter which preserves the query portion of.

    .. container:: declaration

       Objective-C

       .. code-block:: objective-c

          + (CRFilter *)queryPreservingFilterWithString:(NSString *)matchToken

       Swift

       .. code-block:: swift

          class func queryPreservingFilterWithString(matchToken: String)

    .. container:: parameters

       +-------------+-------------------------------------+
       | matchToken  | An NSString of the url to filter    |
       +-------------+-------------------------------------+

.. container:: toggle

    .. container:: header

       \- initWithString:

    .. container:: discussion

       Initialize a filter that denies reporting of all URLs that match the specified token.

    .. container:: declaration

       Objective-C

       .. code-block:: objective-c

          - (id)initWithString:(NSString *)matchToken;

       Swift

       .. code-block:: swift

          init?(string matchToken: String)

    .. container:: parameters

       +-------------+-------------------------------------+
       | matchToken  | An NSString of the url to filter    |
       +-------------+-------------------------------------+

    .. container:: retVal

       A CRFilter object of type :ref:`CRFilterTypeDeny <crfiltertype_ios>`

    .. container:: seealso

       * :ref:`CRFilterType <crfiltertype_ios>`

.. container:: toggle

    .. container:: header

       \- initWithString:andFilterType:

    .. container:: discussion

       Initialize a filter that denies reporting for all URLs that match the specified token.

    .. container:: declaration

       Objective-C

       .. code-block:: objective-c

          - (id)initWithString:(NSString *)matchToken
                 andFilterType:(CRFilterType)filterType;

       Swift

       .. code-block:: swift

          init?(string matchToken: String,
            filterType filterType: CRFilterType)

    .. container:: parameters

       +-------------+-------------------------------------+
       | matchToken  | An NSString of the url to filter    |
       +-------------+-------------------------------------+
       | filterType  | Indicates filter type               |
       +-------------+-------------------------------------+

    .. container:: retVal

       A CRFilter object with the indicated filter type.

    .. container:: seealso

       * :ref:`CRFilterType <crfiltertype_ios>`


Other Methods
-------------

.. container:: toggle

    .. container:: header deprecated

       \+ applyFilter:ToURL:

    .. container:: discussion

       Filter a URL, specifying which type of filter to use.

    .. container:: declaration

       Objective-C

       .. code-block:: objective-c

          + (NSString *)applyFilter:(CRFilterType)filterType
                              ToURL:(NSString *)url;

       Swift

       .. code-block:: swift

          class func applyFilter(filterType: CRFilterType,
                                  ToURL url: String)

    .. container:: parameters

       +-------------+-------------------------------+
       | filterType  | Specifies the filter type     |
       +-------------+-------------------------------+
       | url         | Specifies the url             |
       +-------------+-------------------------------+

    .. container:: availability

       Deprecated in 5.9.3

    .. container:: retVal

       Returns nil when a deny filter is specified.

    .. container:: seealso

       * :ref:`CRFilterType <crfiltertype_ios>`


Constants
---------

.. _crfiltertype_ios:

.. container:: toggle

    .. container:: header

       CRFilterType

    .. container:: discussion

       The filter type of CRFilter

    .. container:: declaration

       Objective-C

       .. code-block:: objective-c

          typedef enum : NSInteger {
             CRFilterTypeScrubQuery,
             CRFilterTypeDeny,
             CRFilterTypePreserveQuery,
             CRFilterTypePreserveFragment,
             CRFilterTypePreserveParameters,
             CRFilterTypePreserveAll
          } UIApplicationState;

       Swift

       .. code-block:: swift

          enum CRFilterType : Int {
              case ScrubQuery
              case Deny
              case PreserveQuery
              case PreserveFragment
              case PreserveParameters
              case PreserveAll
          }

    .. container:: constants

       =================================== ==================================================================================================
       ``CRFilterTypeScrubQuery``          Deprecated

       ``CRFilterTypeDeny``                Deny reporting for certain endpoints. Request with a URL that matches this string are not reported

       ``CRFilterTypePreserveQuery``       Prevent URL query string from being stripped out

       ``CRFilterTypePreserveFragment``    Prevent URL fragment identifier from being stripped out

       ``CRFilterTypePreserveParameters``  Prevent URL parameter string from being stripped out

       ``CRFilterTypePreserveAll``         Prevent URL query, fragment, and parameters sections from being stripped out
       =================================== ==================================================================================================
