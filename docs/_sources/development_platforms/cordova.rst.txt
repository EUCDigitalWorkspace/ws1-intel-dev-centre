.. Cordova Documentation

.. _cordova:

Cordova Integration Guide
==========================

This topic describes how integrate Workspace ONE Intelligence SDK into a Javascript Cordova application. The Cordova plugin is available for iOS and Android.

.. _install_cordova:

Installing the Workspace ONE Intelligence Cordova Plugin
--------------------------------------------------------

You will need Cordova-4.0.0 or higher.

1. Assuming you release your Cordova app on both Android and iOS, you will need an app ID for each. Both of these app IDs are passed to the plugin at initialization time.

2. To integrate the WS1Intelligence plugin, run the following command from your application directory:

.. code-block:: bash

   cordova plugin add cordova-plugin-ws1intelligence

3. Initialize WS1Intelligence. Call ``WS1Intelligence.init()`` after the plugins are installed. This can be done from the onDeviceReady() function.

.. code-block:: js

   document.addEventListener('deviceready', onDeviceReady, false);
   
   function onDeviceReady() {
      WS1Intelligence.init({ 'iosAppID' : 'YOUR_IOS_APP_ID',
                             'androidAppID' : 'YOUR_ANDROID_APP_ID'});
   }

That's it! You're now ready to build and run your app.

App Loads
---------

App Load events for a particular device are automatically tracked by the SDK after initialization.

App Loads are detected at two different times:

1. At SDK initialization time. (Assumed to be app launch time)

2. When the application is foregrounded by the user after a minimal amount of time in the background.

Network Insights
----------------

Network traffic can be logged manually through the Cordova plugin.

.. code-block:: js

  String method = "GET";
  String url = "http://www.abc123def456.com";
  long latency = 2000;
  long bytesRead = 10000;
  long bytesSent = 100;
  int responseCode = 200;
  int errorCode = 0;

  WS1Intelligence.logNetworkRequest(method, 
                                    url,
                                    latency,
                                    bytesRead,
                                    bytesSent,
                                    responseCode,
                                    errorCode);

**Arguments**

====================== =======================================================================================
Name                   Description
====================== =======================================================================================
``method``             String HTTP verb such as "GET", "HEAD", "POST", "PUT", "DELETE", "TRACE", "OPTIONS", "CONNECT", or "PATCH" .

``url``                String, representing the contacted endpoint

``latency``            Number, representing the time between start of request and receipt of response, in milliseconds

``bytesRead``          Number, the number of bytes included in response body

``bytesSent``          Number, the number of bytes included in request body

``responseCode``       Number, HTTP status code, generally 100-599, e.g. 200 == OK, 400 == Bad Request, can be 0 if there is an error

``errorCode``          Number, a non-zero error code can be logged if network request failed to contact server, etc.  Pass 0 if there was no error.
====================== =======================================================================================

.. _userflows_cordova:

Logging User Flows
------------------

Use the ``beginUserFlow``, ``endUserFlow``, ``failUserFlow``, and ``cancelUserFlow``
methods to utilize the User Flow feature.

.. include:: ../shared/userflows_include.txt

Here's an example of how to log a single User Flow using the Cordova plugin:

.. code-block:: javascript

    WS1Intelligence.beginUserFlow("login");

    // Run the code you want to monitor
    var didLogin = runMyLoginCode();
    if (didLogin) {
        WS1Intelligence.endUserFlow("login");
    } else {
        WS1Intelligence.failUserFlow("login");
    }

Starting a User Flow
^^^^^^^^^^^^^^^^^^^^

.. include:: ../shared/userflows_begin_include.txt

Here's an example of how to begin a User Flow:

.. code-block:: javascript

    WS1Intelligence.beginUserFlow("my_user_flow_name");

Ending a User Flow
^^^^^^^^^^^^^^^^^^

.. include:: ../shared/userflows_end_include.txt

Here's an example of how to end a User Flow, which is the same as marking it
as succeeded:

.. code-block:: javascript

    WS1Intelligence.endUserFlow("my_user_flow_name");

Failing a User Flow
^^^^^^^^^^^^^^^^^^^

.. include:: ../shared/userflows_fail_include.txt

Here's how to mark a User Flow as failed:

.. code-block:: javascript

    WS1Intelligence.failUserFlow("my_user_flow_name");

Cancelling a User Flow
^^^^^^^^^^^^^^^^^^^^^^

.. include:: ../shared/userflows_cancel_include.txt

Here's how to mark a User Flow as cancelled:

.. code-block:: javascript

    WS1Intelligence.cancelUserFlow("my_user_flow_name");

.. _breadcrumbs_cordova:

Logging Breadcrumbs
-------------------

Use the ``leaveBreadcrumb`` API to write to a chronological log that is
reported with crashes and exceptions.

.. include:: ../shared/breadcrumbs_include.txt

Here's an example of how to leave a breadcrumb:

.. code-block:: javascript

   WS1Intelligence.leaveBreadcrumb("User tapped a button");

.. _crashes_cordova:

Logging Crashes
---------------

The WS1 Intelligence SDK will automatically detect application crashes and report them as it would in a native app.

Check Previous Session for Crash
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If a crash occurred in the previous session, the plugin will respond with TRUE when the didCrashOnLastLoad function is called.

.. code-block:: javascript

   var callback = function(didCrash) {
     alert("didCrashOnLastLoad value is " + didCrash);
   }

   WS1Intelligence.didCrashOnLastLoad(callback);

.. _handled_exceptions_cordova:

Logging Cordova Exceptions
--------------------------

Use the ``logHandledException`` API to track error conditions that do not necessarily cause a crash.

.. include:: ../shared/plugin_exceptions_include.txt

Here's an example of how to log a plugin exception:

.. code-block:: javascript

   try {
     JSON.parse('this is not valid json');
   } catch(e) {
     WS1Intelligence.logHandledException(e);
   }

.. _metadata_cordova:

Setting a Username
------------------

.. include:: ../shared/set_username_include.txt

Here's an example of how to set a user name:

.. code-block:: javascript

   WS1Intelligence.setUsername("current_user_name");

Opting In and Out of Analytics
------------------------------

Analytics reporting can be turned on and off client-side using the setOptOutStatus function in the Cordova plugin:

.. code-block:: javascript

   WS1Intelligence.setOptOutStatus(true);

You can check the opt-out status using the getOptOutStatus function at any time:

.. code-block:: javascript

   WS1Intelligence.getOptOutStatus(function(status) {
     alert("Opt Out Status: " + status);
   });
