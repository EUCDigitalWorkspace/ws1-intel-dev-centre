:orphan:

.. _integrate_unity:

Unity Integration
-------------------

Apteligent helps developers track and manage performance of mobile
applications on several platforms. For more information, see :ref:`overview`
and the `Solution Overview <https://www.crittercism.com/solution-overview/>`_.

Requirements
^^^^^^^^^^^^^

* Unity version 5.
* iOS 6.0 and later
* Android 2.3 and later

Installing the Unity SDK
^^^^^^^^^^^^^^^^^^^^^^^^^

1. Obtaining the Unity SDK
~~~~~~~~~~~~~~~~~~~~~~~~~~~

:ref:`Download <downloads>` our latest Unity Plugin. The download contains the following items:

===================================================== =======================================================================================
Item                                                  Contains
===================================================== =======================================================================================
``Plugins/iOS``                                       The iOS plugin binary

``Plugins/Android``                                   The Android plugin binary

``Plugins/Crittercism/Crittercism_IOS_Scripts``       Init Script and the C# bindings that call into the Apteligent iOS SDK

``Plugins/Crittercism/Crittercism_Android_Scripts``   Init Script and the C# bindings that call into the Apteligent Android SDK

``DemoApp``                                           An example app

===================================================== =======================================================================================

2. Adding the SDK to your Project
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Drag and drop the ``Plugins`` directory into your project's ``Assets`` folder:

.. image:: ../img/unity_drag_plugins.png
   :align: center

Modifying Your Android Manifest
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A custom ``AndroidManifiest.xml`` file must be added to the ``{Unity Project}/Plugins/Android`` folder. Inside the file, verify you have the ``INTERNET`` and ``ACCESS_NETWORK_STATE`` permission in between the ``<manifest> ... </manifest>`` tags so Apteligent can send data to our servers:

.. code-block:: xml

    <uses-permission android:name="android.permission.INTERNET"/>
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>

For more granular data (optional), add the following permissions:

.. code-block:: xml

    <uses-permission android:name="android.permission.GET_TASKS"/>

3. Adding the Apteligent Component
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* In the Unity Editor, create a new GameObject. Rename the Game Object to "Crittercism Initializer".

* Select the game object in the Hierarchy pane and attach the Apteligent script as a component.

.. image:: ../img/unity_embed_script.png
   :align: center

4. Initializing Apteligent
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Fill in** your iOS app ID and Android app ID

.. image:: ../img/unity_fill_app_id.png
   :align: center

5. Configure Unity Build and Player Settings
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The Unity IDE has several settings which impact the type of data the Apteligent SDK can report.
This section will outline the effects of these settings and give recommended values for best support.

Recommended Settings
""""""""""""""""""""

=================================    ===============================      ===================
Section                              Setting Name                         Recommended Setting
=================================    ===============================      ===================
Build Settings                       Script Debugging                     ON

Player Settings > Crash Reporting    On .Net UnhandledException           Silent Exit

Player Settings > Crash Reporting    Enable CrashReport API               Disabled

Player Settings > Other Settings     Scripting Backend                    IL2CPP

Player Settings > Other Settings     Script Call Optimization             Either

Apteligent SDK Setting               SetLogUnhandledExceptionAsCrash      false
=================================    ===============================      ===================

**Script Debugging** Script Debugging may be turned on in order to get file names and line numbers
in crash stack traces. Without this setting, crash stack traces will only contain class names and 
function names.

**On .Net Unhandled Exception**
When set to **Crash**, the app will immediately exit in the event of an Unhandled Exception. In this
case, a native crash (C++) will be generated by the Apteligent SDK. When set to **Silent Exit**, the 
app will gracefully exit, which allows the capture of a C# stacktrace.

**Enable CrashReport API**
Enables built-in Unity CrashReporter API. This setting is not related to the Apteligent SDK.

**Scripting Backend**
Selects the scripting backend for the player. Native crashes can not be captured for the Mono2x 
scripting backend option. Behavior in mode IL2CPP depends on the Script Call Optimization setting. (iOS only)

**Script Call Optimization (iOS only)**
Apteligent SDK can support either option.

===============================  =========================  =============================  ======================
Scrit Call Optimization Setting  Script Handled Exception   Script Unhandled Exception     Unity Engine Crash
===============================  =========================  =============================  ======================
''Fast but no Exceptions''       C# Stacktrace (Exception)  C# Stacktrace (Crash)          C++ Stacktrace (Crash)
''Slow and Safe''                C# Stacktrace (Exception)  C# Stacktrace(1) (Exception)   C++ Stacktrace (Crash)
===============================  =========================  =============================  ======================

(1) If ``SetLogUnhandledExceptionAsCrash`` is set, Unhandled exceptions in ``Slow and Safe`` mode will be
logged in the ``Crash`` section on the Apteligent portal. Otherwise, they will default to the 
``Handled Exceptions`` section.

**SetLogUnhandledExceptionAsCrash**
This is an Apteligent SDK setting that changes where unhandled exceptions are presented in the
Apteligent portal. See :ref:`SetLogUnhandledExceptionAsCrash-api` for details.

    
Android Optional Configuration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The Android Unity SDK provides additional configuration options to enable logcat collection,
and customize version names. In order to perform these configurations, open ``CrittercismAndroid.cs``
script under ``Plugins/Crittercism/Crittercism_Android_Scripts`` directory.

Inside ``Init (string appID)`` method, instantiate a ``CrittercismConfig`` object and invoke the
``SetLogcatReportingEnabled (bool)`` and ``SetCustomVersionName (string)`` methods. Then pass the
configuration object to the initialization call.

Here's an example:

.. code-block:: csharp

    public static void Init (string appID)
    {
       CrittercismConfig config = new CrittercismConfig ();
       
       // enable logcat collection
       config.SetLogcatReportingEnabled (true);
       
       // set version name to myCustomVersion
       config.SetCustomVersionName ("myCustomVersion");
       
       Init (appID, config);
    }
    
Logging Crashes
^^^^^^^^^^^^^^^

DidCrashOnLastLoad API
~~~~~~~~~~~~~~~~~~~~~~

Use the ``DidCrashOnLastLoad`` API to test if the previous session of
your app crashed.

.. code-block:: csharp

    bool didCrash = Crittercism.DidCrashOnLastLoad();

.. _SetLogUnhandledExceptionAsCrash-api:

SetLogUnhandledExceptionAsCrash API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Unhandled JavaScript exceptions are normally reported to the Handled Exceptions
area of the Apteligent server because the app itself doesn't crash.
Use the ``SetLogUnhandledExceptionAsCrash`` API to request Apteligent
to report unhandled JavaScript exceptions to the Crash Reports area of the
Apteligent server instead.

.. code-block:: csharp

    Crittercism.SetLogUnhandledExceptionAsCrash(value);
    Crittercism.GetLogUnhandledExceptionAsCrash();

The ``value`` should be a bool, ``true`` or ``false``.
Here's an example of how to use ``SetLogUnhandledExceptionAsCrash``:

.. code-block:: csharp

    void CallCriticalBusinessFunction() {
        try {
            SetLogUnhandledExceptionAsCrash(true);
            CriticalBusinessFunction();
        } finally {
            SetLogUnhandledExceptionAsCrash(false);
        }
    }

Logging Handled Exceptions
^^^^^^^^^^^^^^^^^^^^^^^^^^

Use the ``LogHandledException`` API to track error conditions that do not
necessarily cause a crash.

.. include:: ../shared/handled_exceptions_include.txt

Here's an example of how to log a handled exception:

.. code-block:: csharp

    try {
        throw new TestException();
    } catch (System.Exception error) {
        Crittercism.LogHandledException(error);
    }

.. note::

    We limit to sending five exceptions per minute.

Logging Breadcrumbs
^^^^^^^^^^^^^^^^^^^

Use the ``LeaveBreadcrumb`` API to write to a chronological log that is
reported with crashes and handled exceptions.

.. include:: ../shared/breadcrumbs_include.txt

Here's an example of how to leave a breadcrumb:

.. code-block:: csharp

    Crittercism.LeaveBreadcrumb("User started level 5");

Logging User Metadata
^^^^^^^^^^^^^^^^^^^^^

.. include:: ../shared/user_metadata_include.txt


Adding a Username
~~~~~~~~~~~~~~~~~

.. include:: ../shared/set_username_include.txt

Here's an example of how to set a user name:

.. code-block:: csharp

    Crittercism.SetUsername("MommaCritter");


Logging Userflows
^^^^^^^^^^^^^^^^^^^^

Use the ``BeginUserflow``, ``EndUserflow``, ``FailUserflow``,
and ``CancelUserflow`` methods to log userflows.

.. include:: ../shared/userflows_include.txt

Here's an example of how to log a single userflow:

.. code-block:: csharp

    Crittercism.BeginUserflow("login");
    // Run the code you want to monitor
    bool didLogin = RunMyLoginCode();
    if (didLogin) {
        Crittercism.EndUserflow("login");
    } else {
        Crittercism.FailUserflow("login");
    }

Beginning a Userflow
~~~~~~~~~~~~~~~~~~~~~~~

.. include:: ../shared/userflows_begin_include.txt

Here's an example of how to begin a userflow:

.. code-block:: csharp

    Crittercism.BeginUserflow("my userflow");

When beginning a userflow, you can also assign the userflow a value:

.. code-block:: csharp

    var valueInCents = 100;
    Crittercism.BeginUserflow("my userflow", valueInCents);

Ending a Userflow
~~~~~~~~~~~~~~~~~~~~

.. include:: ../shared/userflows_end_include.txt

Here's an example of how to end a userflow, which is the same as marking it
as succeeded:

.. code-block:: csharp

    Crittercism.EndUserflow("my userflow");

Failing a Userflow
~~~~~~~~~~~~~~~~~~~~~

.. include:: ../shared/userflows_fail_include.txt

Here's how to mark a userflow as failed:

.. code-block:: csharp

    Crittercism.FailUserflow("my userflow");


Cancelling a Userflow
~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: ../shared/userflows_cancel_include.txt

Here's how to cancel a userflow:

.. code-block:: csharp

    Crittercism.CancelUserflow("my userflow");

Modifying the Value of a Userflow
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use the ``SetUserflowValue`` and ``GetUserflowValue`` methods to modify
the value of a userflow. The value of a userflow should be specified in
cents.

.. include:: ../shared/userflows_value_include.txt

.. code-block:: csharp

    int itemValueInCents = 100;
    int totalValueInCents
        = Crittercism.GetUserflowValue("shopping cart") + itemValueInCents;
    Crittercism.SetUserflowValue("shopping cart", totalValueInCents);

Setting Opt Out Status
^^^^^^^^^^^^^^^^^^^^^^

.. include:: ../shared/opt_out_include.txt

.. code-block:: csharp

    Crittercism.SetOptOut (true);

    bool isOptedOut = Crittercism.GetOptOut ();